{"version":3,"sources":["components/Product.tsx","components/Post.tsx","components/NewPost.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","delete_post","ID","Delete_post_data","gql","mutate","mutation","variables","Id","window","location","reload","Product","props","className","item","topic_name","topic_data","Button","onClick","Modify_last_unsave_data","a","b","update_post","backend_data","Post","useQuery","loading","error","data","map","idx","Insert_post_data","Last_unsaved_data","NewPost","useState","name","setName","description","setdescription","flag","setFlag","last_topic_name","last_topic_data","action","type","placeholder","onChange","e","target","value","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAOMA,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,WAAS,CACjBC,IAAK,oDAQT,I,EAAMC,EAAc,SAACC,GACjB,IAAMC,EAAmBC,cAAH,uKAQtBV,EAAOW,OAAO,CACVC,SAAUH,EACVI,UAAU,CAACC,GAAGN,KAdlBO,OAAOC,SAASC,QAAO,IA8CZC,EAZC,SAACC,GACb,OACI,sBAAKC,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UACI,4BAAID,EAAME,KAAKC,aACf,4BAAIH,EAAME,KAAKE,gBAEnB,cAACC,EAAA,EAAD,CAAQJ,UAAU,UAAWK,QAAS,kBArB9B,SAACN,GACjB,IAAMO,EAAyBhB,cAAF,+OAO7BV,EAAOW,OAAO,CACVC,SAAUc,EACVb,UAAU,CAACc,EAAER,EAAME,KAAKE,WAAWK,EAAET,EAAME,KAAKC,cAEpDf,EAAYY,EAAME,KAAKP,IAS2Be,CAAYV,IAAtD,oBACA,cAACK,EAAA,EAAD,CAAQJ,UAAU,UAAUK,QAAS,kBAAKlB,EAAYY,EAAME,KAAKP,KAAjE,wBCpDNgB,EAAepB,cAAH,oIA4BHqB,I,MAAAA,EAhBf,WAAiB,IAAD,EACiBC,mBAASF,GAA/BG,EADK,EACLA,QAAQC,EADH,EACGA,MAAMC,EADT,EACSA,KACrB,OAAGF,EAAgB,wCAChBC,EAAc,wCACVC,EAAI,UAAcC,KAAI,SAACf,EAASgB,GACnC,OACA,8BACI,4BACI,cAAC,EAAD,CAAShB,KAAMA,Y,QCnBzBrB,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,WAAS,CACjBC,IAAK,oDAKHgC,EAAmB5B,cAAH,gNAUhB6B,EAAoB7B,cAAH,sHASjBgB,EAAyBhB,cAAF,6NAwDd8B,MAhDf,WAAoB,IACTL,EAAQH,mBAASO,GAAjBJ,KADQ,EAiBMM,mBAAS,IAjBf,mBAiBVC,EAjBU,KAiBLC,EAjBK,OAkBoBF,mBAAS,IAlB7B,mBAkBVG,EAlBU,KAkBEC,EAlBF,OAmBMJ,mBAAS,GAnBf,mBAmBVK,EAnBU,KAmBLC,EAnBK,KAgCf,OAFO,GAAND,GARDX,GAAQA,EAAI,mBAAyBA,EAAI,kBAAsBC,KAAI,SAACf,EAASgB,GACnE,GAALA,IACHM,EAAQtB,EAAK2B,iBACbH,EAAexB,EAAK4B,iBACpBF,EAAQ,OAOR,qBAAK3B,UAAU,OAAf,SACA,uBAAM8B,OAAO,IAAb,UACE,uCACA,uBAAO9B,UAAU,QAAQ+B,KAAK,OAAOC,YAAY,QAAQC,SAAU,SAACC,GAAD,OAAOX,EAAQW,EAAEC,OAAOC,QAAQA,MAAOd,IAC1G,4CACA,uBAAOtB,UAAU,QAAQ+B,KAAK,OAAOC,YAAY,cAAcK,GAAG,cAAcJ,SAAU,SAACC,GAAD,OAAMT,EAAeS,EAAEC,OAAOC,QAAQA,MAAOZ,IACvI,uBACA,cAACpB,EAAA,EAAD,CAAQJ,UAAU,UAAUK,QAnCf,WACfzB,EAAOW,OAAO,CACZC,SAAU0B,EACVzB,UAAU,CAACS,WAAWoB,EAAKnB,WAAWqB,KAExC5C,EAAOW,OAAO,CACZC,SAAUc,EACVb,UAAU,CAACc,EAAE,GAAGC,EAAE,MATpBb,OAAOC,SAASC,QAAO,IAqCrB,wBCrEFjB,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,WAAS,CACjBC,IAAK,oDAkBMoD,MAbf,WAEI,OACE,8BACF,eAAC,iBAAD,CAAgB1D,OAAQA,EAAxB,UACA,cAAC,EAAD,IACA,cAAC,EAAD,UCZW2D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67f2e808.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport '../App.css';\nimport {Button} from 'react-bootstrap';\n\nimport {gql} from '@apollo/client';\nimport {ApolloClient, HttpLink,InMemoryCache} from '@apollo/client';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://mypostapp114.herokuapp.com/v1/graphql',\n  }),\n});\n\nfunction refreshPage() {\n    window.location.reload(false);\n    }\n\nconst delete_post = (ID:any) =>{\n    const Delete_post_data = gql`\n    mutation post_data( $Id : Int!){\n        delete_post_data(where: {Id: {_eq:$Id}}) {\n          affected_rows\n        }\n      }\n    `\n    ;\n    client.mutate({\n        mutation: Delete_post_data,\n        variables:{Id:ID}\n        }\n    )\n    refreshPage();   \n}\n\nconst update_post = (props:any) =>{\n    const Modify_last_unsave_data =gql`\n    mutation last_unsaved_data($a: String!, $b: String!) {\n    update_last_unsaved_data(_set: {last_topic_data: $a, last_topic_name: $b}, where: {index: {_eq: \"1\"}}) {\n        affected_rows\n    }\n    }\n    `\n    client.mutate({\n        mutation: Modify_last_unsave_data,\n        variables:{a:props.item.topic_data,b:props.item.topic_name}\n      })\n    delete_post(props.item.Id);\n}\nconst Product = (props:any) => {\n    return (  \n        <div className=\"card\">\n            <div className=\"container\">\n                <p>{props.item.topic_name}</p>\n                <p>{props.item.topic_data}</p>\n            </div>\n            <Button className=\"button1\"  onClick={()=>update_post(props)}>Update</Button>\n            <Button className=\"button2\" onClick={()=> delete_post(props.item.Id)}>Delete</Button>\n        </div>\n    )\n}\nexport default Product\n","import React from 'react';\nimport '../App.css';\nimport Product from './Product';\n\nimport {useQuery,gql} from '@apollo/client';\nconst backend_data = gql`\n{\n    post_data(order_by: {Id: desc}) {\n      Id\n      topic_data\n      topic_name\n    }\n  }\n  \n`;\n\n\nfunction Post() {\n    const {loading,error,data} = useQuery(backend_data);\n    if(loading) return <p>Loading</p>\n    if(error) return <p>Error :</p>;\n    return data[\"post_data\"].map((item:any,idx:any) =>{\n        return(\n        <div>\n            <p>\n                <Product item={item}/>\n             </p>\n        </div>\n        )\n    });\n    \n}\n\nexport default Post\n","import React,{useState} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport '../App.css';\r\nimport {ApolloProvider, gql, useMutation, useQuery} from '@apollo/client';\r\nimport {ApolloClient, HttpLink,InMemoryCache} from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: new HttpLink({\r\n    uri: 'https://mypostapp114.herokuapp.com/v1/graphql',\r\n  }),\r\n});\r\n\r\n\r\nconst Insert_post_data = gql`\r\n  mutation post_data($topic_name: String!, $topic_data: String!) {\r\n  insert_post_data(objects: {topic_name: $topic_name, topic_data: $topic_data}) {\r\n    affected_rows\r\n  }\r\n}\r\n\r\n`\r\n;\r\n\r\nconst Last_unsaved_data = gql`\r\n{\r\n    last_unsaved_data {\r\n      last_topic_data\r\n      last_topic_name\r\n    }\r\n  }\r\n  \r\n`;\r\nconst Modify_last_unsave_data =gql`\r\nmutation last_unsaved_data($a: String!, $b: String!) {\r\n  update_last_unsaved_data(_set: {last_topic_data: $a, last_topic_name: $b}, where: {index: {_eq: \"1\"}}) {\r\n    affected_rows\r\n  }\r\n}\r\n\r\n`\r\nfunction NewPost() {\r\n    const {data} = useQuery(Last_unsaved_data);\r\n    function refreshPage() {\r\n      window.location.reload(false);\r\n    }\r\n    const onSubmit = () =>{\r\n      client.mutate({\r\n        mutation: Insert_post_data,\r\n        variables:{topic_name:name,topic_data:description}\r\n      })\r\n      client.mutate({\r\n        mutation: Modify_last_unsave_data,\r\n        variables:{a:\"\",b:\"\"}\r\n      })\r\n\r\n      refreshPage();   \r\n    }\r\n  const [name,setName] = useState(\"\");\r\n  const [description,setdescription] = useState(\"\");\r\n  const [flag,setFlag] = useState(0);\r\n  const setdata=()=>{\r\n    \r\n    data && data[\"last_unsaved_data\"] && data[\"last_unsaved_data\"].map((item:any,idx:any)=>{\r\n      if(idx==0){\r\n      setName(item.last_topic_name);\r\n      setdescription(item.last_topic_data);\r\n      setFlag(1);\r\n      }\r\n    })\r\n  }\r\n  if(flag==0)setdata();\r\n\r\n    return (\r\n      <div className=\"card\">\r\n      <form action=\"#\">\r\n        <p>Topic </p>\r\n        <input className=\"topic\" type=\"text\" placeholder=\"Topic\" onChange={(e) => setName(e.target.value)} value={name} />\r\n        <p>Description</p>\r\n        <input className=\"topic\" type=\"text\" placeholder=\"Description\" id=\"description\" onChange={(e)=> setdescription(e.target.value)} value={description} />\r\n        <br />\r\n        <Button className=\"button1\" onClick={onSubmit}>Post</Button>\r\n      </form>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default NewPost\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Post from './components/Post';\nimport NewPost from './components/NewPost';\nimport ReactDOM from 'react-dom';\nimport { Button } from 'react-bootstrap';\n\n// Hasura Calls and connection\nimport {ApolloProvider, gql, useMutation, useQuery} from '@apollo/client';\nimport {ApolloClient, HttpLink,InMemoryCache} from '@apollo/client';\nimport { brotliDecompressSync } from 'zlib';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'https://mypostapp114.herokuapp.com/v1/graphql',\n  }),\n});\n\n\nfunction App() {  \n\n    return (\n      <div>\n    <ApolloProvider client={client}>\n    <NewPost />\n    <Post />\n    </ApolloProvider>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}